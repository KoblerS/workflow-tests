name: Copy Fork on Sync Comment

on:
  issue_comment:
    types: [created]

jobs:
  copy-fork:
    if: >
      github.event.issue.pull_request &&
      contains(github.event.comment.body, 'sync')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check write access
        id: access
        uses: actions/github-script@v7
        with:
          script: |
            const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.comment.user.login
            });
            if (perm.permission === 'admin' || perm.permission === 'write') return true;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Sorry @${context.payload.comment.user.login}, you do not have write access to perform this action.`
            });
            return false;

      - name: Stop if no write access
        if: steps.access.outputs.result != 'true'
        run: exit 0

      - name: Generate branch name
        id: gen-branch
        run: echo "branch-name=sync-fork-branch-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0

      - name: Create sync branch
        run: git checkout -b ${{ steps.gen-branch.outputs.branch-name }}

      - name: Get PR head info
        id: get-head
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            core.setOutput('headRepo', pr.data.head.repo.full_name);
            core.setOutput('headRef', pr.data.head.ref);

      - name: Checkout fork code
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.get-head.outputs.headRepo }}
          ref: ${{ steps.get-head.outputs.headRef }}
          path: fork

      - name: Copy fork code
        run: |
          rm -rf fork/.github fork/.git
          cp -R fork/. .
          rm -rf fork

      - name: Commit & push
        id: push-changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Sync fork code from PR #${{ github.event.issue.number }}"
          git push --set-upstream origin ${{ steps.gen-branch.outputs.branch-name }}
        continue-on-error: true

      - name: Close original PR
        if: steps.push-changes.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });

      - name: Create new PR
        id: new_pr
        if: steps.push-changes.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const newPr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Sync fork code from PR #${context.issue.number}`,
              head: '${{ steps.gen-branch.outputs.branch-name }}',
              base: pr.data.base.ref,
              body: `Automated sync from fork for PR #${context.issue.number}`,
              maintainer_can_modify: true
            });
            return newPr.data.number;

      - name: Assign PR user & reviewers
        if: steps.push-changes.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const origPr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const newPrNum = ${{ steps.new_pr.outputs.result }};
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: newPrNum,
              assignees: [origPr.data.user.login]
            });
            const reviewers = origPr.data.requested_reviewers.map(r => r.login);
            if (reviewers.length)
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: newPrNum,
                reviewers
              });

      - name: Comment with new PR link
        if: steps.push-changes.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const newPrNum = ${{ steps.new_pr.outputs.result }};
            const { data: newPr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: newPrNum
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `A new PR has been created to sync the fork: #${newPr.number} (${newPr.html_url})`
            });
