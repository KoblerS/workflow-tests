name: Copy Fork on Sync Comment

on:
  issue_comment:
    types: [created]

jobs:
  copy-fork:
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, 'sync')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check if commenting user has write access
        id: access
        uses: actions/github-script@v7
        with:
          script: |
            const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.comment.user.login
            });
            if (perm.permission === 'admin' || perm.permission === 'write') {
              return true;
            } else {
              // Post a comment about invalid access
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `Sorry @${context.payload.comment.user.login}, you do not have write access to perform this action.`
              });
              return false;
            }

      - name: Stop if no write access
        if: steps.access.outputs.result != 'true'
        run: exit 0

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0

      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            // Return "owner/repo" string for the fork
            return `${pr.data.head.repo.owner.login}/${pr.data.head.repo.name}`;

      - name: Checkout fork code
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr.outputs.result }}
          ref: ${{ github.event.pull_request.head.ref }}
          path: fork

      - name: Copy fork code to repo
        run: |
          rsync -a --delete fork/ .
          rm -rf fork

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Sync fork code from PR #${{ github.event.issue.number }}"
          git push
        continue-on-error: true

      - name: Close existing pull request
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });

      - name: Create new pull request
        id: new_pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const newPr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Sync fork code from PR #${context.issue.number}`,
              head: pr.data.head.ref,
              base: pr.data.base.ref,
              body: `Automated sync from fork for PR #${context.issue.number}`,
              maintainer_can_modify: true
            });
            return newPr.data.number;

      - name: Assign initial PR user
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.new_pr.outputs.result }},
              assignees: [pr.data.user.login]
            });

      - name: Add reviewers from original PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const reviewers = pr.data.requested_reviewers.map(r => r.login);
            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ steps.new_pr.outputs.result }},
                reviewers
              });
            }

      - name: Comment on initial PR with link to new PR
        uses: actions/github-script@v7
        with:
          script: |
            const newPrNumber = ${{ steps.new_pr.outputs.result }};
            const { data: newPr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: newPrNumber
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `A new PR has been created to sync the fork: #${newPr.number} (${newPr.html_url})`
            });